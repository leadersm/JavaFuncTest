package com.tianwen.news.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tianwen.news.data.db.SearchHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEARCH_HISTORY.
*/
public class SearchHistoryDao extends AbstractDao<SearchHistory, String> {

    public static final String TABLENAME = "SEARCH_HISTORY";

    /**
     * Properties of entity SearchHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StockCode = new Property(0, String.class, "stockCode", true, "STOCK_CODE");
        public final static Property StockName = new Property(1, String.class, "stockName", false, "STOCK_NAME");
        public final static Property Pinyin = new Property(2, String.class, "pinyin", false, "PINYIN");
        public final static Property Mtype = new Property(3, String.class, "mtype", false, "MTYPE");
        public final static Property Date = new Property(4, Long.class, "date", false, "DATE");
    };


    public SearchHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEARCH_HISTORY' (" + //
                "'STOCK_CODE' TEXT PRIMARY KEY NOT NULL ," + // 0: stockCode
                "'STOCK_NAME' TEXT NOT NULL ," + // 1: stockName
                "'PINYIN' TEXT," + // 2: pinyin
                "'MTYPE' TEXT," + // 3: mtype
                "'DATE' INTEGER);"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEARCH_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchHistory entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getStockCode());
        stmt.bindString(2, entity.getStockName());
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(3, pinyin);
        }
 
        String mtype = entity.getMtype();
        if (mtype != null) {
            stmt.bindString(4, mtype);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SearchHistory readEntity(Cursor cursor, int offset) {
        SearchHistory entity = new SearchHistory( //
            cursor.getString(offset + 0), // stockCode
            cursor.getString(offset + 1), // stockName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mtype
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchHistory entity, int offset) {
        entity.setStockCode(cursor.getString(offset + 0));
        entity.setStockName(cursor.getString(offset + 1));
        entity.setPinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMtype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SearchHistory entity, long rowId) {
        return entity.getStockCode();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SearchHistory entity) {
        if(entity != null) {
            return entity.getStockCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
