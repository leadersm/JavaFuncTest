package com.tianwen.news.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tianwen.news.data.db.Read;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table READ.
*/
public class ReadDao extends AbstractDao<Read, String> {

    public static final String TABLENAME = "READ";

    /**
     * Properties of entity Read.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NewsId = new Property(0, String.class, "newsId", true, "NEWS_ID");
        public final static Property Date = new Property(1, Long.class, "date", false, "DATE");
    };


    public ReadDao(DaoConfig config) {
        super(config);
    }
    
    public ReadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'READ' (" + //
                "'NEWS_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: newsId
                "'DATE' INTEGER);"); // 1: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'READ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Read entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNewsId());
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Read readEntity(Cursor cursor, int offset) {
        Read entity = new Read( //
            cursor.getString(offset + 0), // newsId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Read entity, int offset) {
        entity.setNewsId(cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Read entity, long rowId) {
        return entity.getNewsId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Read entity) {
        if(entity != null) {
            return entity.getNewsId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
