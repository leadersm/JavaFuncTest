package com.tianwen.news.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tianwen.news.data.db.NewsType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWS_TYPE.
*/
public class NewsTypeDao extends AbstractDao<NewsType, String> {

    public static final String TABLENAME = "NEWS_TYPE";

    /**
     * Properties of entity NewsType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Mode = new Property(3, String.class, "mode", false, "MODE");
        public final static Property Boss = new Property(4, String.class, "boss", false, "BOSS");
        public final static Property Market = new Property(5, String.class, "market", false, "MARKET");
        public final static Property Color = new Property(6, String.class, "color", false, "COLOR");
        public final static Property Sort = new Property(7, Integer.class, "sort", false, "SORT");
    };


    public NewsTypeDao(DaoConfig config) {
        super(config);
    }
    
    public NewsTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWS_TYPE' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'DESC' TEXT," + // 2: desc
                "'MODE' TEXT," + // 3: mode
                "'BOSS' TEXT," + // 4: boss
                "'MARKET' TEXT," + // 5: market
                "'COLOR' TEXT," + // 6: color
                "'SORT' INTEGER);"); // 7: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsType entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(4, mode);
        }
 
        String boss = entity.getBoss();
        if (boss != null) {
            stmt.bindString(5, boss);
        }
 
        String market = entity.getMarket();
        if (market != null) {
            stmt.bindString(6, market);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(7, color);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(8, sort);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsType readEntity(Cursor cursor, int offset) {
        NewsType entity = new NewsType( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // boss
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // market
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // color
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // sort
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsType entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBoss(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMarket(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setColor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSort(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NewsType entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NewsType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
